@using DevExpress.ExpressApp.Blazor
@using DevExpress.ExpressApp.Blazor.Components
@using DevExpress.ExpressApp.Blazor.Templates
@using DevExpress.ExpressApp.Blazor.Services
@using DevExpress.ExpressApp.Utils

@inherits FrameTemplateComponentBase<SSOLogin>

@implements IDisposable
@inject ILanguageSwitcherService LanguageSwitcherService

<div id="logon-template-component" class="app h-100 d-flex flex-column">
    <div class="logon-template-header card card-header d-flex flex-row justify-content-center">
        <div class="header-logo"></div>
    </div>
    <div class="logon-template-body d-flex xaf-flex-auto flex-column overflow-auto">
        <div class="logon-main-container w-100 d-flex justify-content-center align-items-center xaf-flex-auto">
            <div class="logon-main card mx-3 my-3">
                <SizeModeContainer>
                    @if(LanguageSwitcherService.Visible) {
                        <div class="card-header">
                            <div class="d-flex align-items-center justify-content-between">
                                <div>@FrameTemplate.ViewCaption</div>
                                <div class="toolbar-language-switcher-wrapper">
                                    <ToolbarLanguageSwitcher />
                                </div>
                            </div>
                        </div>
                    }
                    else {
                        <div class="card-header text-center" style="height:45px">
                    
                        </div>
                    }
                    <div class="card-body">
                    <div class="loginbutton">
                            @FrameTemplate.AdditionalToolbar.GetComponentContent()
                    </div>
           
                    </div>
                </SizeModeContainer>
            </div>
        </div>
    </div>
</div>

@code {
    public static RenderFragment Create(SSOLogin logonWindowTemplate) => @<SSOLoginComponent FrameTemplate="@logonWindowTemplate" />;

    protected override void OnInitialized() {
        base.OnInitialized();
        FrameTemplate.AdditionalToolbar.VisibleChanged += AdditionalToolbar_VisibilityChanged;
    }

    private void AdditionalToolbar_VisibilityChanged(object s, EventArgs e) {
        InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose() {
        if(FrameTemplate is not null) {
            FrameTemplate.AdditionalToolbar.VisibleChanged -= AdditionalToolbar_VisibilityChanged;
        }
    }
}
